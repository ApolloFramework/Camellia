An Updated README on building with SCons and on visualization(added by Jesse on 11/11/11)

******** BUILDING **********

SCons has been added as an alternative build system. To build with SCons, you
first must 
1) Build and install a given version of trilinos (serial-debug,
serial-release, mpi, etc). Put this in some other directory.
2) Modify the file build/SConscript to have the variables TrilinosIncludes and
TrilinosLibDir set to the /include and /lib directory of your given trilinos
installation. 
3) Cd into a given driver directory in /Drivers. User-defined driver files go
here. For an example, cd into the Poisson directory. If you run scons inside
there, it will build the library, then link everything in to create an
executable that it will put inside Drivers/Poisson/exec. Notice that there are
a lot more files in Poisson/ than are used by SConscript to create the
executable. 


******* Other Notes *******
- If you cd into the /build directory and run scons, you will just build the
  library. 
- You may want to modify the SConstruct build file you're using (either the
  build/SConstruct or Drivers/*/SConstruct file) to use different build
  options. The default is to set the C++ compiler to "c++" with optimization
  -O3. In your trilinos build folder, there should be a file
  Makefile.export.Trilinos_install. There are recommended compiler options,
  optimization values, and so on for your system (configured by Cmake when
  building Trilinos), which you may want to set in your own SConstruct
  environment. We will hopefully have a python script that will just read in
  these variables automatically in the future. 



A Software Toolbox for Discountinuous Petrov-Galerkin (DPG) Methods
-------------------------------------------------------------------
by Nate Roberts



******** BUILDING **********

The distribution contains two directories, build and src.  Inside build is a
makefile.  The assumption in the makefile is that your various Trilinos
library builds are stored in subdirectories of a common build directory; e.g.:

~/lib/Trilinos/serial-debug
~/lib/Trilinos/serial-release
~/lib/Trilinos/mpi-debug
~/lib/Trilinos/mpi-release

If that's your setup, then these are the steps to build the DPGTrilinos code
in the various modes corresponding to your Trilinos builds:
1. Create subdirectories of the DPGTrilinos build to match those of your
Trilinos builds.  E.g. for the first build listed above:

mkdir build/serial-debug

2. Edit the line in the makefile that reads:
TRILINOS_DIR = /Users/nroberts/Documents/Sandia/Trilinos-latest/build/$(BUILD_TYPE)

so that the bit before $(BUILD_TYPE) matches your Trilinos library root.

3. cd to the directory corresponding to the variant you'd like to build:

cd build/serial-debug

4. Run make with BUILD_TYPE set to the build directory name:

make -f ../makefile BUILD_TYPE=serial-debug



******** RUNNING ***********

As of this writing, DPG Trilinos includes 3 drivers:
1. DPGTests: runs a number of tests on the code.  No command-line options
2. PoissonStudy: runs an h-convergence study for a Poisson manufactured
   solution.  Arguments: p-order h-order-min h-order-max.  
   I.e. "PoissonStudy 3 0 5" will use cubic elements, with the mesh ranging
   from 1x1 to 32x32.
3. StokesStudy: runs an h-convergence study for a Stokes manufactured
   solution.  Arguments: [math|opt] p-order h-order-min h-order-max.  I.e.
   "StokesStudy 3 0 5" will use cubic elements, with the mesh ranging from 1x1 to
   32x32.  The default norm choice is the quasi-optimal norm with beta=1.0; to
   get math norm do "StokesStudy math 3 0 5".

There is a MATLAB script for visualizing the .dat outputs of *Study in src/visualization.

